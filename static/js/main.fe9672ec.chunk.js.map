{"version":3,"sources":["components/tree.jsx","components/table.jsx","App.js","reportWebVitals.js","index.js"],"names":["nodes","value","label","children","Tree","React","useState","checked","expanded","state","setState","onCheck","onExpand","list","id","name","deadline","Date","type","isComplete","Table","search","setSearch","data","filter","item","toLowerCase","includes","style","textAlign","htmlFor","onChange","event","target","tableList","map","toLocaleDateString","year","month","day","toString","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAKMA,EAAQ,CACZ,CACEC,MAAO,OACPC,MAAO,OACPC,SAAU,CACR,CACEF,MAAO,YACPC,MAAO,YACPC,SAAU,CACR,CACEF,MAAO,SACPC,MAAO,SACPC,SAAU,CACR,CAAEF,MAAO,SAAUC,MAAO,UAC1B,CAAED,MAAO,UAAWC,MAAO,WAC3B,CAAED,MAAO,UAAWC,MAAO,eAKnC,CACED,MAAO,YACPC,MAAO,YACPC,SAAU,CACR,CAAEF,MAAO,UAAWC,MAAO,UAC3B,CAAED,MAAO,WAAYC,MAAO,WAC5B,CAAED,MAAO,WAAYC,MAAO,gBAOzBE,EAAO,WAAO,IAAD,EACEC,IAAMC,SAAS,CACvCC,QAAS,GACTC,SAAU,KAHY,mBACjBC,EADiB,KACVC,EADU,KAMxB,OACE,cAAC,IAAD,CACEV,MAAOA,EACPO,QAASE,EAAMF,QACfC,SAAUC,EAAMD,SAChBG,QAAS,SAACJ,GAAD,OAAaG,GAAS,SAAAD,GAAK,kCAASA,GAAT,IAAgBF,gBACpDK,SAAU,SAACJ,GAAD,OAAcE,GAAS,SAAAD,GAAK,kCAASA,GAAT,IAAgBD,oB,OCvCtDK,EAAO,CACX,CACEC,GAAI,IACJC,KAAM,QACNC,SAAU,IAAIC,KAAK,KAAM,EAAG,IAC5BC,KAAM,QACNC,YAAY,GAEd,CACEL,GAAI,IACJC,KAAM,QACNC,SAAU,IAAIC,KAAK,KAAM,EAAG,IAC5BC,KAAM,QACNC,YAAY,GAEd,CACEL,GAAI,IACJC,KAAM,SACNC,SAAU,IAAIC,KAAK,KAAM,EAAG,GAC5BC,KAAM,QACNC,YAAY,IAIHC,EAAQ,WAAO,IAAD,EACGf,WAAe,IADlB,mBAClBgB,EADkB,KACVC,EADU,KAOnBC,EAAO,CACXvB,MAAOa,EAAKW,QAAO,SAACC,GAAD,OACjBA,EAAKV,KAAKW,cAAcC,SAASN,EAAOK,mBAI5C,OACE,qCACE,qBAAKE,MAAO,CAAEC,UAAW,SAAzB,SACE,wBAAOC,QAAQ,SAAf,4BAEE,uBAAOhB,GAAG,SAASI,KAAK,OAAOa,SAflB,SAACC,GACpBV,EAAUU,EAAMC,OAAOhC,eAkBrB,cAAC,IAAD,CAAQsB,KAAMA,EAAd,SACG,SAACW,GAAD,OACC,qCACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,mBACA,cAAC,IAAD,4BAIJ,cAAC,IAAD,UACGA,EAAUC,KAAI,SAACV,GAAD,OACb,eAAC,IAAD,CAAmBA,KAAMA,EAAzB,UACE,cAAC,IAAD,UAAOA,EAAKV,OACZ,cAAC,IAAD,UACGU,EAAKT,SAASoB,mBAAmB,QAAS,CACzCC,KAAM,UACNC,MAAO,UACPC,IAAK,cAGT,cAAC,IAAD,UAAOd,EAAKP,OACZ,cAAC,IAAD,UAAOO,EAAKN,WAAWqB,eAVff,EAAKX,mBC5DhB,SAAS2B,IACtB,OACE,cAAC,IAAD,UACE,gCACE,8BACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,QAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAON,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,wDCvCZ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe9672ec.chunk.js","sourcesContent":["import React from \"react\";\nimport CheckboxTree from \"react-checkbox-tree\";\n\nimport \"react-checkbox-tree/lib/react-checkbox-tree.css\";\n\nconst nodes = [\n  {\n    value: \"home\",\n    label: \"Home\",\n    children: [\n      {\n        value: \"documents\",\n        label: \"Documents\",\n        children: [\n          {\n            value: \"office\",\n            label: \"Office\",\n            children: [\n              { value: \"public\", label: \"Public\" },\n              { value: \"private\", label: \"Private\" },\n              { value: \"general\", label: \"General\" },\n            ],\n          },\n        ],\n      },\n      {\n        value: \"downloads\",\n        label: \"Downloads\",\n        children: [\n          { value: \"public1\", label: \"Public\" },\n          { value: \"private1\", label: \"Private\" },\n          { value: \"general1\", label: \"General\" },\n        ],\n      },\n    ],\n  },\n];\n\nexport const Tree = () => {\n  const [state, setState] = React.useState({\n    checked: [],\n    expanded: [],\n  });\n\n  return (\n    <CheckboxTree\n      nodes={nodes}\n      checked={state.checked}\n      expanded={state.expanded}\n      onCheck={(checked) => setState(state => ({...state, checked }))}\n      onExpand={(expanded) => setState(state => ({...state, expanded }))}\n    />\n  );\n};\n","import * as React from \"react\";\nimport {\n  Table as RTable,\n  Header,\n  HeaderRow,\n  HeaderCell,\n  Body,\n  Row,\n  Cell,\n} from \"@table-library/react-table-library/table\";\n\nconst list = [\n  {\n    id: \"1\",\n    name: \"Karra\",\n    deadline: new Date(2020, 1, 17),\n    type: \"SETUP\",\n    isComplete: true,\n  },\n  {\n    id: \"2\",\n    name: \"Miell\",\n    deadline: new Date(2020, 2, 28),\n    type: \"LEARN\",\n    isComplete: true,\n  },\n  {\n    id: \"3\",\n    name: \"Cierra\",\n    deadline: new Date(2020, 3, 8),\n    type: \"LEARN\",\n    isComplete: false,\n  },\n];\n\nexport const Table = () => {\n  const [search, setSearch] = React.useState(\"\");\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const data = {\n    nodes: list.filter((item) =>\n      item.name.toLowerCase().includes(search.toLowerCase())\n    ),\n  };\n\n  return (\n    <>\n      <div style={{ textAlign: \"right\" }}>\n        <label htmlFor=\"search\">\n          Search by Name:\n          <input id=\"search\" type=\"text\" onChange={handleSearch} />\n        </label>\n      </div>\n\n      <RTable data={data}>\n        {(tableList) => (\n          <>\n            <Header>\n              <HeaderRow>\n                <HeaderCell>Name</HeaderCell>\n                <HeaderCell>Date</HeaderCell>\n                <HeaderCell>Type</HeaderCell>\n                <HeaderCell>Complete</HeaderCell>\n              </HeaderRow>\n            </Header>\n\n            <Body>\n              {tableList.map((item) => (\n                <Row key={item.id} item={item}>\n                  <Cell>{item.name}</Cell>\n                  <Cell>\n                    {item.deadline.toLocaleDateString(\"en-US\", {\n                      year: \"numeric\",\n                      month: \"2-digit\",\n                      day: \"2-digit\",\n                    })}\n                  </Cell>\n                  <Cell>{item.type}</Cell>\n                  <Cell>{item.isComplete.toString()}</Cell>\n                </Row>\n              ))}\n            </Body>\n          </>\n        )}\n      </RTable>\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport { Tree } from './components/tree';\nimport { Table } from './components/table';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/tree\">Tree</Link>\n            </li>\n            <li>\n              <Link to=\"/table\">Table</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/tree\">\n            <Tree />\n          </Route>\n          <Route path=\"/table\">\n            <Table />\n          </Route>\n          <Route path=\"/\">\n            <div>Select page</div>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}